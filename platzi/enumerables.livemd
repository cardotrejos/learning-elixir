# Enumerables & Streams

## Numerables

```elixir
Enum.map([2, 4, 6], fn x -> x * 2 end)
```

```elixir
Enum.map(%{1 => 2, 3 => 4}, fn {k, v} -> k * v end)
```

```elixir
Enum.map(1..10, fn x -> x * 2 end)
```

```elixir
# capture operator
Enum.reduce(1..10, &+/2)
```

https://dockyard.com/blog/2016/08/05/understand-capture-operator-in-elixir

```elixir
Enum.reduce(1..10, 0, fn number, acc -> number + acc end)
```

```elixir
List.insert_at([1, 2, 3], 2, 4)
```

## Lazy evaluation vs Early evaluation

```elixir
odd? = &(rem(&1, 2) != 0)
Enum.filter(1..3, odd?)
```

```elixir
1..1_000_000
|> Enum.map(&(&1 * 3))
|> Enum.filter(odd?)
|> Enum.sum()
```

## Pipe Operator (|>)

```elixir
# Without pipe operator
Enum.sum(Enum.filter(Enum.map(1..1_000_000, &(&1 * 3)), odd?))
```

```elixir
Enum.map(1..3, fn x -> x * 3 end)
```

```elixir
Enum.map(1..3, &(&1 * 3))
```
